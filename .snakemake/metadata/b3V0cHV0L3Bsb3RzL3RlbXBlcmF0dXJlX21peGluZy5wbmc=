{"version": null, "code": "gASV1gYAAAAAAAAoQxJ0AGQBfA58EWQCjQMBAGQAUwCUKIwFaW5wdXSUjAZvdXRwdXSUjAZwYXJhbXOUjAl3aWxkY2FyZHOUjAd0aHJlYWRzlIwJcmVzb3VyY2VzlIwDbG9nlIwHdmVyc2lvbpSMBHJ1bGWUjAljb25kYV9lbnaUjA1jb250YWluZXJfaW1nlIwQc2luZ3VsYXJpdHlfYXJnc5SMD3VzZV9zaW5ndWxhcml0eZSMC2Vudl9tb2R1bGVzlIwMYmVuY2hfcmVjb3JklIwFam9iaWSUjAhpc19zaGVsbJSMD2JlbmNoX2l0ZXJhdGlvbpSMD2NsZWFudXBfc2NyaXB0c5SMCnNoYWRvd19kaXKUjA1lZGl0X25vdGVib29rlIwPY29uZGFfYmFzZV9wYXRolIwHYmFzZWRpcpSMGHJ1bnRpbWVfc291cmNlY2FjaGVfcGF0aJSMGF9faXNfc25ha2VtYWtlX3J1bGVfZnVuY5R0lF2UKE5YSAUAAAogICAgICAgIGVjaG8gIntpbnB1dC5maW5hbF9wZGJ9IGdlbmVyYXRlZC4gQW5hbHl6aW5nIG91dHB1dC4iIAoKICAgICAgICAjIEV4dHJhY3QgZXhjaGFuZ2UgcHJvYmFiaWxpdGllcwogICAgICAgIGdyZXAgLUE5ICJhdmVyYWdlIHByb2JhYmlsaXRpZXMiIHJlcGxpY2FzL3JlcGxpY2FfKi9yZW1kLmxvZyAyPiYxIHwgdGVlIC1hIG91dHB1dC9kYXRhX2ZpbGVzL2V4Y2hhbmdlX3JhdGVzX3N0YXRpc3RpY3MudHh0CgogICAgICAgICMgUGFyc2UgZXhjaGFuZ2UgcmF0ZXMKICAgICAgICBweXRob24zIHBhcnNlX2V4Y2hhbmdlX3JhdGVzLnB5IDI+JjEgfCB0ZWUgLWEgb3V0cHV0L2xvZ3MvcGFyc2VfZXhjaGFuZ2VfcmF0ZXMubG9nCgogICAgICAgICMgRXh0cmFjdCBwb3RlbnRpYWwgZW5lcmd5IGFuZCBSTVNEIHh2Z3MgZm9yIGVhY2ggcmVwbGljYQogICAgICAgIGJhc2ggRXBvdF9ybXNkLnNoIDI+JjEgfCB0ZWUgLWEgb3V0cHV0L2xvZ3MvRXBvdF9ybXNkLmxvZwoKICAgICAgICAjIFBsb3QgUk1TRCBkaXN0cmlidXRpb24KICAgICAgICBweXRob24zIHBsb3Rfcm1zZF9kaXN0cmlidXRpb24ucHkgMj4mMSB8IHRlZSAtYSBvdXRwdXQvbG9ncy9wbG90X3Jtc2RfZGlzdHJpYnV0aW9uLmxvZwoKICAgICAgICAjIFBsb3QgcG90ZW50aWFsIGVuZXJneSBvdmVybGFwCiAgICAgICAgcHl0aG9uMyBwbG90X2VuZXJneV9vdmVybGFwLnB5IDI+JjEgfCB0ZWUgLWEgb3V0cHV0L2xvZ3MvcGxvdF9lbmVyZ3lfb3ZlcmxhcC5sb2cKCiAgICAgICAgIyBDYWxjdWxhdGUgY29udmVyZ2VuY2UgbWV0cmljcwogICAgICAgIGJhc2ggY2FsY3VsYXRlX2NvbnZlcmdlbmNlLnNoIDI+JjEgfCB0ZWUgLWEgb3V0cHV0L2xvZ3MvY2FsY3VsYXRlX2NvbnZlcmdlbmNlLmxvZwoKICAgICAgICAjIFBhcnNlIGNvbnZlcmdlbmNlIG1ldHJpY3MKICAgICAgICBweXRob24zIHBhcnNlX2NvbnZlcmdlbmNlX21ldHJpY3MucHkgMj4mMSB8IHRlZSAtYSBvdXRwdXQvbG9ncy9wYXJzZV9jb252ZXJnZW5jZV9tZXRyaWNzLmxvZwoKICAgICAgICAjIEdlbmVyYXRlIHRlbXBlcmF0dXJlIG1peGluZyBwbG90CiAgICAgICAgYmFzaCB0ZW1wZXJhdHVyZV90cmFqLnNoIDI+JjEgfCB0ZWUgLWEgb3V0cHV0L2xvZ3MvdGVtcGVyYXR1cmVfdHJhai5sb2cKCiAgICAgICAgIyBQbG90IHRlbXBlcmF0dXJlIHRyYWplY3RvcmllcwogICAgICAgIHB5dGhvbjMgcGxvdF90ZW1wZXJhdHVyZV9taXhpbmcucHkgMj4mMSB8IHRlZSAtYSBvdXRwdXQvbG9ncy9wbG90X3RlbXBlcmF0dXJlX21peGluZy5sb2cKICAgICAgICAKICAgICAgICAjY2xlYW4gcm9vdCBkaXJlY3RvcnkKICAgICAgICBiYXNoIGNsZWFuLnNoCiAgICAgICAglGgPaBKGlGWMBXNoZWxslIWUdJQu", "rule": "analyze_output", "input": ["output/final_pdbs/replica_001_final_structure.pdb"], "log": [], "params": [], "shellcmd": "\n        echo \"output/final_pdbs/replica_001_final_structure.pdb generated. Analyzing output.\" \n\n        # Extract exchange probabilities\n        grep -A9 \"average probabilities\" replicas/replica_*/remd.log 2>&1 | tee -a output/data_files/exchange_rates_statistics.txt\n\n        # Parse exchange rates\n        python3 parse_exchange_rates.py 2>&1 | tee -a output/logs/parse_exchange_rates.log\n\n        # Extract potential energy and RMSD xvgs for each replica\n        bash Epot_rmsd.sh 2>&1 | tee -a output/logs/Epot_rmsd.log\n\n        # Plot RMSD distribution\n        python3 plot_rmsd_distribution.py 2>&1 | tee -a output/logs/plot_rmsd_distribution.log\n\n        # Plot potential energy overlap\n        python3 plot_energy_overlap.py 2>&1 | tee -a output/logs/plot_energy_overlap.log\n\n        # Calculate convergence metrics\n        bash calculate_convergence.sh 2>&1 | tee -a output/logs/calculate_convergence.log\n\n        # Parse convergence metrics\n        python3 parse_convergence_metrics.py 2>&1 | tee -a output/logs/parse_convergence_metrics.log\n\n        # Generate temperature mixing plot\n        bash temperature_traj.sh 2>&1 | tee -a output/logs/temperature_traj.log\n\n        # Plot temperature trajectories\n        python3 plot_temperature_mixing.py 2>&1 | tee -a output/logs/plot_temperature_mixing.log\n        \n        #clean root directory\n        bash clean.sh\n        ", "incomplete": false, "starttime": 1734854744.0, "endtime": 1734854832.0, "job_hash": 7722002300676, "conda_env": null, "container_img_url": null}